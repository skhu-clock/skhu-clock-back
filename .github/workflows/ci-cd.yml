# This workflow uses actions that are not certified by GitHub. 
# They are provided by a third-party and are governed by 
# separate terms of service, privacy policy, and support 
# documentation.      
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle
 
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'zulu'
    
    # gradlew 파일 권한 지정     
    - name: permission for gradlew
      run: chmod +x gradlew
      
    # Spring Boot 어플리케이션 Build  (1)
    - name: Spring Boot Build 
      run : ./gradlew clean build --exclude-task test
  
    # DockerHub Login (2) 
    - name: docker login 
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Docker 이미지 Build (3)
    - name: docker image build
      run: sudo docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot .
    
    # Docker Hub push (4) 
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot

    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD_HH-mm-ss
        utcOffset: "+09:00"
          
    # GET GitHub IP (5) 
    - name: get GitHub IP
      id: ip
      uses: haythem/public-ip@v1.2
      
    # Configure AWS Credentials (6) - AWS 접근 권한 취득(IAM)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    #  Add github ip to AWS (7) 
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/24
        
    
    # AWS EC2 Server Connect & Docker 명령어 실행 (8) 
    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }} 
        password: ${{ secrets.EC2_PASSWORD }} 
        port: ${{ secrets.EC2_SSH_PORT }}
        script: |
          sudo docker stop spring-boot
          sudo docker rm spring-boot
          sudo docker rmi "${{ secrets.DOCKERHUB_USERNAME }}/spring-boot:latest"
          sudo docker run ${{ secrets.ENVIRONMENT }} -d -p 8080:8080 --name spring-boot ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot:latest
          
    # REMOVE Github IP FROM security group (9)
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
